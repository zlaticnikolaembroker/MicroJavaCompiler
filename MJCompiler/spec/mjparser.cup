

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, EQUAL, RETURN, PLUS, COMMA, PRINT, VOID, CONST, LSQUARE, RSQUARE;
terminal MINUS, LESS, LESSEQUAL, GREATER, GREATEREQUAL, MUL, DIV, MOD, IDENTICAL, NOTIDENTICAL;
terminal READ, COLON;
terminal NEW, INCREMENT, DECREMENT, QUESTION;

terminal Integer NUMBER;
terminal String IDENT;
terminal Character CONSTCHAR;
terminal Boolean CONSTBOOL;

nonterminal VarDeclList, MethodDeclList, VarDecl;
nonterminal FormPars, StatementList, FormalParamList, FormalParamDecl, Statement;
nonterminal Addop, ActualPars, ActualParamList;
nonterminal Identifiers, ProgramDeclarations, ConstDecl, ConstAssignops;
nonterminal Mulop, Relop, DesignatorStatement, CondFact, Assignop;
nonterminal OptionalMinus, DesignatorArray, TernaryOne, TernaryTwo;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodDecl, Designator, MethodTypeDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Factor, Expr, BasicExpr;

Program ::= (Program) PROG ProgName:name ProgramDeclarations LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgramName) IDENT:progName
		;

ProgramDeclarations ::= (ProgramDeclConst) ProgramDeclarations ConstDecl
					|					
					(ProgramDeclVar) ProgramDeclarations VarDecl
					|
					(NoProgramDecls) /* epsilon */
					;

ConstDecl ::= (ConstDeclaration) CONST Type:constType ConstAssignops SEMI;

ConstAssignops ::= (ConstAssignNumber) IDENT:constName EQUAL NUMBER:constVal
				|
				(ConstAssignNumbers) ConstAssignops COMMA IDENT:constName EQUAL NUMBER:constVal
				|
				(ConstAssignChar) IDENT:constName EQUAL CONSTCHAR:constVal
				|
				(ConstAssignChars) ConstAssignops COMMA IDENT:constName EQUAL CONSTCHAR:constVal
				|
				(ConstAssignBool) IDENT:constName EQUAL CONSTBOOL:constVal
				|
				(ConstAssignBools) ConstAssignops COMMA IDENT:constName EQUAL CONSTBOOL:constVal
				;

VarDeclList ::= (VarDeclarations) VarDeclList VarDecl
			|
			(NoVarDecl) /* epsilon */
			;

VarDecl ::= (VarDecl) Type:varType Identifiers SEMI
		|
		(VarError) error SEMI:l
		|
		(VarErrorComma) error COMMA:l
		   ;

Identifiers ::= (SingleVar) IDENT:varName
			|
			(SingleArray) IDENT:varName LSQUARE RSQUARE
			|
			(MultipleVars) Identifiers COMMA IDENT:varName 
			|
			(MultupleArray) Identifiers COMMA IDENT:varName LSQUARE RSQUARE 
			;

Type ::= (Type) IDENT:typeName;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDecl) /* epsilon */
				;
				
MethodDecl ::= (MethodDeclaration) Type:retType IDENT:methName LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE
			|
			(MethodDeclVoid) MethodTypeDecl LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE;
			
MethodTypeDecl ::= (MethodTypeDeclaration) VOID:retType IDENT:methName
				;

FormPars ::= (FormParams) FormalParamList
		  |
		  (NoFormParam) /* epsilon */
		  ;
		  
FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
				|
				(SingleFormalParamDecl) FormalParamDecl
				;
				
FormalParamDecl ::= (FormalParamDecl) Type:paramType IDENT:paramName;

StatementList ::= (Statements) StatementList Statement
				|
				(NoStmt) /* epsilon */
				;	 

Statement ::= (Assignment) DesignatorStatement SEMI
		   |
		   (PrintStmt) PRINT LPAREN Expr RPAREN SEMI
		   |
		   (PrintStmtWithNum) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI
		   |
		   (ReadStmt) READ LPAREN Designator RPAREN SEMI
		   |
		   (ReturnExpr) RETURN Expr:t SEMI
		   |
		   (ReturnNoExpr) RETURN SEMI
		   ;
				
CondFact ::= (CondFact) OptionalMinus BasicExpr
			|
			(CondtFactMore) OptionalMinus BasicExpr Relop OptionalMinus BasicExpr
			;
			
BasicExpr ::= (AddExpr) BasicExpr:te Addop Term:t
			|
	 		(TermExpr) Term:t
	 		;

OptionalMinus ::= (OptionalMinus) MINUS
				|
				(NoOptionalMinus)
				;
	
Expr ::= (BasicExpresion) OptionalMinus BasicExpr
		|
		(Ternary) CondFact TernaryOne Expr TernaryTwo Expr
		;
		
TernaryOne ::= (TernaryOne) QUESTION
;

TernaryTwo ::= (TernaryTwo) COLON
;

Term ::= (Term) Factor:t 
		|
		(TermMore) Term Mulop Factor:t
		;

Factor ::= (Const) NUMBER
		|
		(ConstChar) CONSTCHAR
		|
		(ConstBool) CONSTBOOL
		|
		(Var) Designator:d
		|
		(ExprParens) LPAREN Expr RPAREN
		|
		(NewExpression) NEW Type:varType LSQUARE Expr RSQUARE
		;
		
ActualPars ::= (Actuals) ActualParamList
			|
			(NoActuals) /* epsilon */
			;
		
ActualParamList ::= (ActualParams) ActualParamList COMMA Expr
				|
				(ActualParam) Expr
				;
				
Designator ::= (DesignatorBasic) IDENT:name
			|
			(DesignatorArrayItem) DesignatorArray LSQUARE Expr:index RSQUARE 
			;
			
DesignatorArray ::= (DesignatorArray) Designator;
			
DesignatorStatement ::= (DesignatorStmtAssignop) Designator Assignop Expr
					|
					(DesignatorStmtAssignopError) Designator Assignop:l error
					|
					(DesignatorStmtInc) Designator INCREMENT
					|
					(DesignatorStmtDec) Designator DECREMENT
					;

Assignop ::= (Assignop) EQUAL
			;

Addop ::= (AddopPlus) PLUS
		|
		(AddopMinus) MINUS
		;
		
Mulop ::= (MulopMul) MUL	
		|
		(MulopDiv) DIV
		|
		(MulopMod) MOD
		;

Relop ::= (RelopIdentical) IDENTICAL
		|
		(RelopNotIdentical) NOTIDENTICAL
		|
		(RelopGreater) GREATER
		|
		(RelopGreaterEqual) GREATEREQUAL
		|
		(RelopLess) LESS
		|
		(RelopLessEqual) LESSEQUAL
		;