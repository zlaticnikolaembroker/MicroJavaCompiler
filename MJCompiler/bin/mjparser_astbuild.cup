

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, EQUAL, RETURN, PLUS, COMMA, PRINT, VOID, CONST, LSQUARE, RSQUARE;
terminal MINUS, LESS, LESSEQUAL, GREATER, GREATEREQUAL, MUL, DIV, MOD, IDENTICAL, NOTIDENTICAL;
terminal READ, COLON;
terminal NEW, INCREMENT, DECREMENT, QUESTION;

terminal Integer NUMBER;
terminal String IDENT;
terminal Character CONSTCHAR;
terminal Boolean CONSTBOOL;

nonterminal Program Program;
nonterminal VarDeclList VarDeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal VarDecl VarDecl;
nonterminal Type Type;
nonterminal MethodDecl MethodDecl;
nonterminal FormPars FormPars;
nonterminal StatementList StatementList;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal Statement Statement;
nonterminal Designator Designator;
nonterminal Expr Expr;
nonterminal Term Term;
nonterminal Addop Addop;
nonterminal Factor Factor;
nonterminal ActualPars ActualPars;
nonterminal ActualParamList ActualParamList;
nonterminal Identifiers Identifiers;
nonterminal ProgramDeclarations ProgramDeclarations;
nonterminal ConstDecl ConstDecl;
nonterminal ConstAssignops ConstAssignops;
nonterminal Mulop Mulop;
nonterminal Relop Relop;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal CondFact CondFact;
nonterminal Assignop Assignop;
nonterminal BasicExpr BasicExpr;
nonterminal OptionalMinus OptionalMinus;

Program ::= (Program) PROG IDENT:I1 ProgramDeclarations:P2 LBRACE MethodDeclList:M3 RBRACE {: RESULT=new Program(I1, P2, M3); RESULT.setLine(I1left); :};

ProgramDeclarations ::= (ProgramDeclConst) ProgramDeclarations:P1 ConstDecl:C2 {: RESULT=new ProgramDeclConst(P1, C2); RESULT.setLine(P1left); :}
					|					
					(ProgramDeclVar) ProgramDeclarations:P1 VarDecl:V2 {: RESULT=new ProgramDeclVar(P1, V2); RESULT.setLine(P1left); :}
					|
					(NoProgramDecls) {: RESULT=new NoProgramDecls(); :} /* epsilon */
					;

ConstDecl ::= (ConstDeclaration) CONST Type:constType ConstAssignops:C1 SEMI {: RESULT=new ConstDeclaration(constType, C1); RESULT.setLine(constTypeleft); :};

ConstAssignops ::= (ConstAssignNumber) IDENT:constName EQUAL NUMBER:constVal {: RESULT=new ConstAssignNumber(constName, constVal); RESULT.setLine(constNameleft); :}
				|
				(ConstAssignNumbers) ConstAssignops:C1 COMMA IDENT:constName EQUAL NUMBER:constVal {: RESULT=new ConstAssignNumbers(C1, constName, constVal); RESULT.setLine(C1left); :}
				|
				(ConstAssignChar) IDENT:constName EQUAL CONSTCHAR:constVal {: RESULT=new ConstAssignChar(constName, constVal); RESULT.setLine(constNameleft); :}
				|
				(ConstAssignChars) ConstAssignops:C1 COMMA IDENT:constName EQUAL CONSTCHAR:constVal {: RESULT=new ConstAssignChars(C1, constName, constVal); RESULT.setLine(C1left); :}
				|
				(ConstAssignBool) IDENT:constName EQUAL CONSTBOOL:constVal {: RESULT=new ConstAssignBool(constName, constVal); RESULT.setLine(constNameleft); :}
				|
				(ConstAssignBools) ConstAssignops:C1 COMMA IDENT:constName EQUAL CONSTBOOL:constVal {: RESULT=new ConstAssignBools(C1, constName, constVal); RESULT.setLine(C1left); :}
				;

VarDeclList ::= (VarDeclarations) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclarations(V1, V2); RESULT.setLine(V1left); :}
			|
			(NoVarDecl) {: RESULT=new NoVarDecl(); :} /* epsilon */
			;

VarDecl ::= (VarDecl) Type:varType Identifiers:I1 SEMI {: RESULT=new VarDecl(varType, I1); RESULT.setLine(varTypeleft); :}
		|
		(VarError) error SEMI:l
		   {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new VarError(); :}
		   ;

Identifiers ::= (SingleVar) IDENT:varName {: RESULT=new SingleVar(varName); RESULT.setLine(varNameleft); :}
			|
			(SingleArray) IDENT:varName LSQUARE RSQUARE {: RESULT=new SingleArray(varName); RESULT.setLine(varNameleft); :}
			|
			(MultipleVars) Identifiers:I1 COMMA IDENT:I2 {: RESULT=new MultipleVars(I1, I2); RESULT.setLine(I1left); :} 
			|
			(MultupleArray) Identifiers:I1 COMMA IDENT:I2 LSQUARE RSQUARE {: RESULT=new MultupleArray(I1, I2); RESULT.setLine(I1left); :} 
			;

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
				|
				(NoMethodDecl) {: RESULT=new NoMethodDecl(); :} /* epsilon */
				;
				
MethodDecl ::= (MethodDecl) Type:retType IDENT:methName LPAREN FormPars:F1 RPAREN VarDeclList:V2 LBRACE StatementList:S3 RBRACE {: RESULT=new MethodDecl(retType, methName, F1, V2, S3); RESULT.setLine(retTypeleft); :}
			|
			(MethodDeclVoid) VOID:retType IDENT:methName LPAREN FormPars:F1 RPAREN VarDeclList:V2 LBRACE StatementList:S3 RBRACE {: RESULT=new MethodDeclVoid(methName, F1, V2, S3); RESULT.setLine(methNameleft); :};

FormPars ::= (FormParams) FormalParamList:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :}
		  |
		  (NoFormParam) {: RESULT=new NoFormParam(); :} /* epsilon */
		  ;
		  
FormalParamList ::= (FormalParamDecls) FormalParamList:F1 COMMA FormalParamDecl:F2 {: RESULT=new FormalParamDecls(F1, F2); RESULT.setLine(F1left); :}
				|
				(SingleFormalParamDecl) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDecl(F1); RESULT.setLine(F1left); :}
				;
				
FormalParamDecl ::= (FormalParamDecl) Type:paramType IDENT:paramName {: RESULT=new FormalParamDecl(paramType, paramName); RESULT.setLine(paramTypeleft); :};

StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :}
				|
				(NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
				;	 

Statement ::= (Assignment) DesignatorStatement:D1 SEMI {: RESULT=new Assignment(D1); RESULT.setLine(D1left); :}
		   |
		   (ErrorStmt) error SEMI:l
		   {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new ErrorStmt(); :}
		   |
		   (ErrorStmtComma) error COMMA:c
		   {: parser.report_error("Izvrsen oporavak do , u liniji " + cleft, null);  :} {: RESULT=new ErrorStmtComma(); :}
		   |
		   (PrintStmt) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new PrintStmt(E1); RESULT.setLine(E1left); :}
		   |
		   (PrintStmtWithNum) PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN SEMI {: RESULT=new PrintStmtWithNum(E1, N2); RESULT.setLine(E1left); :}
		   |
		   (ReadStmt) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStmt(D1); RESULT.setLine(D1left); :}
		   |
		   (ReturnExpr) RETURN Expr:t SEMI {: RESULT=new ReturnExpr(t); RESULT.setLine(tleft); :}
		   |
		   (ReturnNoExpr) RETURN SEMI {: RESULT=new ReturnNoExpr(); :}
		   ;
				
CondFact ::= (CondFact) OptionalMinus:O1 BasicExpr:B2 {: RESULT=new CondFact(O1, B2); RESULT.setLine(O1left); :}
			|
			(CondtFactMore) OptionalMinus:O1 BasicExpr:B2 Relop:R3 OptionalMinus:O4 BasicExpr:B5 {: RESULT=new CondtFactMore(O1, B2, R3, O4, B5); RESULT.setLine(O1left); :}
			;
			
BasicExpr ::= (AddExpr) BasicExpr:te Addop:A1 Term:t {: RESULT=new AddExpr(te, A1, t); RESULT.setLine(teleft); :}
			|
	 		(TermExpr) Term:t {: RESULT=new TermExpr(t); RESULT.setLine(tleft); :}
	 		;

OptionalMinus ::= (OptionalMinus) MINUS {: RESULT=new OptionalMinus(); :}
				|
				(NoOptionalMinus) {: RESULT=new NoOptionalMinus(); :}
				;
	
Expr ::= (BasicExpresion) OptionalMinus:O1 BasicExpr:B2 {: RESULT=new BasicExpresion(O1, B2); RESULT.setLine(O1left); :}
		|
		(Ternary) CondFact:C1 QUESTION Expr:E2 COLON Expr:E3 {: RESULT=new Ternary(C1, E2, E3); RESULT.setLine(C1left); :}
		;

Term ::= (Term) Factor:t {: RESULT=new Term(t); RESULT.setLine(tleft); :} 
		|
		(TermMore) Term:T1 Mulop:M2 Factor:t {: RESULT=new TermMore(T1, M2, t); RESULT.setLine(T1left); :}
		;

Factor ::= (Const) NUMBER:N1 {: RESULT=new Const(N1); RESULT.setLine(N1left); :}
		|
		(ConstChar) CONSTCHAR:C1 {: RESULT=new ConstChar(C1); RESULT.setLine(C1left); :}
		|
		(ConstBool) CONSTBOOL:C1 {: RESULT=new ConstBool(C1); RESULT.setLine(C1left); :}
		|
		(Var) Designator:d {: RESULT=new Var(d); RESULT.setLine(dleft); :}
		|
		(ExprParens) LPAREN Expr:E1 RPAREN {: RESULT=new ExprParens(E1); RESULT.setLine(E1left); :}
		|
		(NewExpression) NEW Type:varType {: RESULT=new NewExpression(varType); RESULT.setLine(varTypeleft); :}
		|
		(NewExpressionArray) NEW Type:varType LSQUARE Expr:E1 RSQUARE {: RESULT=new NewExpressionArray(varType, E1); RESULT.setLine(varTypeleft); :}
		;
		
ActualPars ::= (Actuals) ActualParamList:A1 {: RESULT=new Actuals(A1); RESULT.setLine(A1left); :}
			|
			(NoActuals) {: RESULT=new NoActuals(); :} /* epsilon */
			;
		
ActualParamList ::= (ActualParams) ActualParamList:A1 COMMA Expr:E2 {: RESULT=new ActualParams(A1, E2); RESULT.setLine(A1left); :}
				|
				(ActualParam) Expr:E1 {: RESULT=new ActualParam(E1); RESULT.setLine(E1left); :}
				;
				
Designator ::= (Designator) IDENT:name {: RESULT=new Designator(name); RESULT.setLine(nameleft); :}
			|
			(DesignatorArrayItem) Designator:D1 LSQUARE Expr:index RSQUARE {: RESULT=new DesignatorArrayItem(D1, index); RESULT.setLine(D1left); :} 
			;
			
DesignatorStatement ::= (DesignatorStmtAssignop) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new DesignatorStmtAssignop(D1, A2, E3); RESULT.setLine(D1left); :}
					|
					(DesignatorStmtInc) Designator:D1 INCREMENT {: RESULT=new DesignatorStmtInc(D1); RESULT.setLine(D1left); :}
					|
					(DesignatorStmtDec) Designator:D1 DECREMENT {: RESULT=new DesignatorStmtDec(D1); RESULT.setLine(D1left); :}
					;

Assignop ::= (Assignop) EQUAL {: RESULT=new Assignop(); :}
			;

Addop ::= (AddopPlus) PLUS {: RESULT=new AddopPlus(); :}
		|
		(AddopMinus) MINUS {: RESULT=new AddopMinus(); :}
		;
		
Mulop ::= (MulopMul) MUL {: RESULT=new MulopMul(); :}	
		|
		(MulopDiv) DIV {: RESULT=new MulopDiv(); :}
		|
		(MulopMod) MOD {: RESULT=new MulopMod(); :}
		;

Relop ::= (RelopIdentical) IDENTICAL {: RESULT=new RelopIdentical(); :}
		|
		(RelopNotIdentical) NOTIDENTICAL {: RESULT=new RelopNotIdentical(); :}
		|
		(RelopGreater) GREATER {: RESULT=new RelopGreater(); :}
		|
		(RelopGreaterEqual) GREATEREQUAL {: RESULT=new RelopGreaterEqual(); :}
		|
		(RelopLess) LESS {: RESULT=new RelopLess(); :}
		|
		(RelopLessEqual) LESSEQUAL {: RESULT=new RelopLessEqual(); :}
		;