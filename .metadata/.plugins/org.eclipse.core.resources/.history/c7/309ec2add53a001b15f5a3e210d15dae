
package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

terminal PROG, IDENT, LBRACE, RBRACE, IDENT, SEMI, LPAREN, RPAREN, COMMA, EQUAL, SEMI, RETURN, NUMBER, PLUS;

nonterminal Program, VarDeclList, MethodDeclList, VarDecl, Type, MethodDecl;
nonterminal FormParams, StatementList, FormalParamList, FormalParamDecl, Statement;
nonterminal Designator, Expr, Term, Addop, Factor, ActualPars, ActualParamList;

Program ::= (Program) PROG IDENT VarDeclList LBRACE MEthodDeclList RBRACE;

VarDeclList ::= (VarDeclarations) VarDeclList VarDecl
			|
			(NoVarDecl)/* epsilon */
			;
			
VarDecl ::= (VarDecl) Type:varType IDENT:varName SEMI;

MethodDeclList :== (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDeclaration) /* epsilon */
				;
				
MethodDecl ::= (MethodDecl) Type:retType IDENT:methodName LPAREN FormParams RPAREN VarDeclList LBRACE StatementList RBRACE;

FormParams ::= (FormalParams) FormalParamList
			|
			(NoFormParam) /* epsilon */
			;
			
FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
				|
				(SingleFormalParamDecl) FormalParamDecl
				;
				
StatementList ::= (Statements) StatementList Statement
				|
				(NoStatement) /* epsilon */
				;
				
Statement ::= (Assignment) Designator:dest EQUAL Expr:e SEMI
			|
			(PrintStatement) PRINT LPAREN Expr RPAREN SEMI
			|
			(ReturnExpr) RETURN Expr:t SEMI
			|
			(ReturnNoExpr) RETURN SEMI;
			
Expr ::= (AddExpr) Expr:te Addop Term:t
	 |
	 (TermExpr) Term:t 
	 ;
	 
Term ::= (Term) Factor: t;
	
Factor :== (Const) NUMBER
		|
		(Var) Designator:d
		|
		(FuncCall) Designator:func LPAREN ActualPars RPAREN
		;
	 
ActualPars ::= (Actuals) ActualParamList
		 	|
		 	(NoActuals) /* epsilon */	
		 	; 

ActualParamList ::= (ActualParams) ActualParamList COMMA Espr
				|
				(ActualParam) Expr
				;

Designator ::= (Designator) IDENT:name;

Addop := (Addop) PLUS;

